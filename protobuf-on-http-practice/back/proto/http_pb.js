// source: proto/http.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.drakejin.examples.http.Request', null, global);
goog.exportSymbol('proto.drakejin.examples.http.Request.Name', null, global);
goog.exportSymbol('proto.drakejin.examples.http.RequestA', null, global);
goog.exportSymbol('proto.drakejin.examples.http.RequestB', null, global);
goog.exportSymbol('proto.drakejin.examples.http.RequestC', null, global);
goog.exportSymbol('proto.drakejin.examples.http.Response', null, global);
goog.exportSymbol('proto.drakejin.examples.http.ResponseA', null, global);
goog.exportSymbol('proto.drakejin.examples.http.ResponseB', null, global);
goog.exportSymbol('proto.drakejin.examples.http.ResponseC', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.Request.displayName = 'proto.drakejin.examples.http.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.Response.displayName = 'proto.drakejin.examples.http.Response';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.RequestA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.RequestA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.RequestA.displayName = 'proto.drakejin.examples.http.RequestA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.ResponseA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.ResponseA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.ResponseA.displayName = 'proto.drakejin.examples.http.ResponseA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.RequestB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.RequestB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.RequestB.displayName = 'proto.drakejin.examples.http.RequestB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.ResponseB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.ResponseB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.ResponseB.displayName = 'proto.drakejin.examples.http.ResponseB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.RequestC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.RequestC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.RequestC.displayName = 'proto.drakejin.examples.http.RequestC';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.drakejin.examples.http.ResponseC = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.drakejin.examples.http.ResponseC, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.drakejin.examples.http.ResponseC.displayName = 'proto.drakejin.examples.http.ResponseC';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    reqA: (f = msg.getReqA()) && proto.drakejin.examples.http.RequestA.toObject(includeInstance, f),
    reqB: (f = msg.getReqB()) && proto.drakejin.examples.http.RequestB.toObject(includeInstance, f),
    reqC: (f = msg.getReqC()) && proto.drakejin.examples.http.RequestC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.Request}
 */
proto.drakejin.examples.http.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.Request;
  return proto.drakejin.examples.http.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.Request}
 */
proto.drakejin.examples.http.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.drakejin.examples.http.RequestA;
      reader.readMessage(value,proto.drakejin.examples.http.RequestA.deserializeBinaryFromReader);
      msg.setReqA(value);
      break;
    case 101:
      var value = new proto.drakejin.examples.http.RequestB;
      reader.readMessage(value,proto.drakejin.examples.http.RequestB.deserializeBinaryFromReader);
      msg.setReqB(value);
      break;
    case 102:
      var value = new proto.drakejin.examples.http.RequestC;
      reader.readMessage(value,proto.drakejin.examples.http.RequestC.deserializeBinaryFromReader);
      msg.setReqC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReqA();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.drakejin.examples.http.RequestA.serializeBinaryToWriter
    );
  }
  f = message.getReqB();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.drakejin.examples.http.RequestB.serializeBinaryToWriter
    );
  }
  f = message.getReqC();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.drakejin.examples.http.RequestC.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.drakejin.examples.http.Request.Name = {
  UNKNOWN: 0,
  REQUEST_A: 1,
  REQUEST_B: 2,
  REQUEST_C: 3
};

/**
 * optional RequestA req_a = 100;
 * @return {?proto.drakejin.examples.http.RequestA}
 */
proto.drakejin.examples.http.Request.prototype.getReqA = function() {
  return /** @type{?proto.drakejin.examples.http.RequestA} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.RequestA, 100));
};


/**
 * @param {?proto.drakejin.examples.http.RequestA|undefined} value
 * @return {!proto.drakejin.examples.http.Request} returns this
*/
proto.drakejin.examples.http.Request.prototype.setReqA = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Request} returns this
 */
proto.drakejin.examples.http.Request.prototype.clearReqA = function() {
  return this.setReqA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Request.prototype.hasReqA = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional RequestB req_b = 101;
 * @return {?proto.drakejin.examples.http.RequestB}
 */
proto.drakejin.examples.http.Request.prototype.getReqB = function() {
  return /** @type{?proto.drakejin.examples.http.RequestB} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.RequestB, 101));
};


/**
 * @param {?proto.drakejin.examples.http.RequestB|undefined} value
 * @return {!proto.drakejin.examples.http.Request} returns this
*/
proto.drakejin.examples.http.Request.prototype.setReqB = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Request} returns this
 */
proto.drakejin.examples.http.Request.prototype.clearReqB = function() {
  return this.setReqB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Request.prototype.hasReqB = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional RequestC req_c = 102;
 * @return {?proto.drakejin.examples.http.RequestC}
 */
proto.drakejin.examples.http.Request.prototype.getReqC = function() {
  return /** @type{?proto.drakejin.examples.http.RequestC} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.RequestC, 102));
};


/**
 * @param {?proto.drakejin.examples.http.RequestC|undefined} value
 * @return {!proto.drakejin.examples.http.Request} returns this
*/
proto.drakejin.examples.http.Request.prototype.setReqC = function(value) {
  return jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Request} returns this
 */
proto.drakejin.examples.http.Request.prototype.clearReqC = function() {
  return this.setReqC(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Request.prototype.hasReqC = function() {
  return jspb.Message.getField(this, 102) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.Response.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    resA: (f = msg.getResA()) && proto.drakejin.examples.http.ResponseA.toObject(includeInstance, f),
    resB: (f = msg.getResB()) && proto.drakejin.examples.http.ResponseB.toObject(includeInstance, f),
    resC: (f = msg.getResC()) && proto.drakejin.examples.http.ResponseC.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.Response}
 */
proto.drakejin.examples.http.Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.Response;
  return proto.drakejin.examples.http.Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.Response}
 */
proto.drakejin.examples.http.Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = new proto.drakejin.examples.http.ResponseA;
      reader.readMessage(value,proto.drakejin.examples.http.ResponseA.deserializeBinaryFromReader);
      msg.setResA(value);
      break;
    case 101:
      var value = new proto.drakejin.examples.http.ResponseB;
      reader.readMessage(value,proto.drakejin.examples.http.ResponseB.deserializeBinaryFromReader);
      msg.setResB(value);
      break;
    case 102:
      var value = new proto.drakejin.examples.http.ResponseC;
      reader.readMessage(value,proto.drakejin.examples.http.ResponseC.deserializeBinaryFromReader);
      msg.setResC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResA();
  if (f != null) {
    writer.writeMessage(
      100,
      f,
      proto.drakejin.examples.http.ResponseA.serializeBinaryToWriter
    );
  }
  f = message.getResB();
  if (f != null) {
    writer.writeMessage(
      101,
      f,
      proto.drakejin.examples.http.ResponseB.serializeBinaryToWriter
    );
  }
  f = message.getResC();
  if (f != null) {
    writer.writeMessage(
      102,
      f,
      proto.drakejin.examples.http.ResponseC.serializeBinaryToWriter
    );
  }
};


/**
 * optional ResponseA res_a = 100;
 * @return {?proto.drakejin.examples.http.ResponseA}
 */
proto.drakejin.examples.http.Response.prototype.getResA = function() {
  return /** @type{?proto.drakejin.examples.http.ResponseA} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.ResponseA, 100));
};


/**
 * @param {?proto.drakejin.examples.http.ResponseA|undefined} value
 * @return {!proto.drakejin.examples.http.Response} returns this
*/
proto.drakejin.examples.http.Response.prototype.setResA = function(value) {
  return jspb.Message.setWrapperField(this, 100, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Response} returns this
 */
proto.drakejin.examples.http.Response.prototype.clearResA = function() {
  return this.setResA(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Response.prototype.hasResA = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional ResponseB res_b = 101;
 * @return {?proto.drakejin.examples.http.ResponseB}
 */
proto.drakejin.examples.http.Response.prototype.getResB = function() {
  return /** @type{?proto.drakejin.examples.http.ResponseB} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.ResponseB, 101));
};


/**
 * @param {?proto.drakejin.examples.http.ResponseB|undefined} value
 * @return {!proto.drakejin.examples.http.Response} returns this
*/
proto.drakejin.examples.http.Response.prototype.setResB = function(value) {
  return jspb.Message.setWrapperField(this, 101, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Response} returns this
 */
proto.drakejin.examples.http.Response.prototype.clearResB = function() {
  return this.setResB(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Response.prototype.hasResB = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * optional ResponseC res_c = 102;
 * @return {?proto.drakejin.examples.http.ResponseC}
 */
proto.drakejin.examples.http.Response.prototype.getResC = function() {
  return /** @type{?proto.drakejin.examples.http.ResponseC} */ (
    jspb.Message.getWrapperField(this, proto.drakejin.examples.http.ResponseC, 102));
};


/**
 * @param {?proto.drakejin.examples.http.ResponseC|undefined} value
 * @return {!proto.drakejin.examples.http.Response} returns this
*/
proto.drakejin.examples.http.Response.prototype.setResC = function(value) {
  return jspb.Message.setWrapperField(this, 102, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.drakejin.examples.http.Response} returns this
 */
proto.drakejin.examples.http.Response.prototype.clearResC = function() {
  return this.setResC(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.drakejin.examples.http.Response.prototype.hasResC = function() {
  return jspb.Message.getField(this, 102) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.RequestA.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.RequestA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.RequestA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestA.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.RequestA}
 */
proto.drakejin.examples.http.RequestA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.RequestA;
  return proto.drakejin.examples.http.RequestA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.RequestA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.RequestA}
 */
proto.drakejin.examples.http.RequestA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.RequestA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.RequestA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.RequestA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.RequestA.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.RequestA} returns this
 */
proto.drakejin.examples.http.RequestA.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.ResponseA.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.ResponseA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.ResponseA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseA.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.ResponseA}
 */
proto.drakejin.examples.http.ResponseA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.ResponseA;
  return proto.drakejin.examples.http.ResponseA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.ResponseA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.ResponseA}
 */
proto.drakejin.examples.http.ResponseA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.ResponseA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.ResponseA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.ResponseA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.ResponseA.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.ResponseA} returns this
 */
proto.drakejin.examples.http.ResponseA.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.RequestB.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.RequestB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.RequestB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestB.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.RequestB}
 */
proto.drakejin.examples.http.RequestB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.RequestB;
  return proto.drakejin.examples.http.RequestB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.RequestB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.RequestB}
 */
proto.drakejin.examples.http.RequestB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.RequestB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.RequestB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.RequestB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.RequestB.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.RequestB} returns this
 */
proto.drakejin.examples.http.RequestB.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.ResponseB.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.ResponseB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.ResponseB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseB.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.ResponseB}
 */
proto.drakejin.examples.http.ResponseB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.ResponseB;
  return proto.drakejin.examples.http.ResponseB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.ResponseB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.ResponseB}
 */
proto.drakejin.examples.http.ResponseB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.ResponseB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.ResponseB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.ResponseB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.ResponseB.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.ResponseB} returns this
 */
proto.drakejin.examples.http.ResponseB.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.RequestC.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.RequestC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.RequestC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestC.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.RequestC}
 */
proto.drakejin.examples.http.RequestC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.RequestC;
  return proto.drakejin.examples.http.RequestC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.RequestC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.RequestC}
 */
proto.drakejin.examples.http.RequestC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.RequestC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.RequestC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.RequestC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.RequestC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.RequestC.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.RequestC} returns this
 */
proto.drakejin.examples.http.RequestC.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.drakejin.examples.http.ResponseC.prototype.toObject = function(opt_includeInstance) {
  return proto.drakejin.examples.http.ResponseC.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.drakejin.examples.http.ResponseC} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseC.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.drakejin.examples.http.ResponseC}
 */
proto.drakejin.examples.http.ResponseC.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.drakejin.examples.http.ResponseC;
  return proto.drakejin.examples.http.ResponseC.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.drakejin.examples.http.ResponseC} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.drakejin.examples.http.ResponseC}
 */
proto.drakejin.examples.http.ResponseC.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.drakejin.examples.http.ResponseC.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.drakejin.examples.http.ResponseC.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.drakejin.examples.http.ResponseC} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.drakejin.examples.http.ResponseC.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.drakejin.examples.http.ResponseC.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.drakejin.examples.http.ResponseC} returns this
 */
proto.drakejin.examples.http.ResponseC.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.drakejin.examples.http);
